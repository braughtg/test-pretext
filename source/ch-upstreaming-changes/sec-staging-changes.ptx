<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-staging-changes" xmlns:xi="http://www.w3.org/2001/XInclude" >
  <title>Staging Changes</title>

  <introduction>
    <p>
      As you saw in the previous section, you now have modifications to your local files that have not been staged.
      The process of staging changes (i.e.
      adding the files to the stage) is illustrated in <xref ref="fig-staging-changes" />.
      Recall from <xref ref="fig-edit-local-files-on-feature-branch" /> that the blue dot in <em>Local Files</em> represents the changes you made.
      In <xref ref="fig-staging-changes" />, those changes are staged and will be made into a commit that is added to your feature branch in the next section.
    </p>
  </introduction>

  <p>
    <figure xml:id="fig-staging-changes">
      <caption> Staging changes. </caption>
      <image source="images/ch-upstreaming-changes/staging-changes.png" width="75%">
        <description>
          Staging Changes.
        </description>
      </image>
    </figure>
  </p>

  <exercises>
  <title/>
  <introduction>
    <p>
      The exercises in this section will walk you through staging the changes you made to your <em>Local Files</em>.
    </p>
  </introduction>

  <exercise xml:id="ex-staging-changes" label="ex-staging-changes">
    <introduction>
      <p>
        The <c>git stage &lt;file&gt;</c> command adds the indicated file to the stage, preparing it to become a part of the next commit.
        Use the <c>git stage &lt;file&gt;</c> command now to stage the file that you edited.
      </p>
    </introduction>


    <task xml:id="ex-staging-changes-a" label="ex-staging-changes-a">
      <statement>
        <p>
          Paste the output of the <c>git stage</c> command here.
        </p>
      </statement>
      <response />
    </task>
    <!--
    <task xml:id="ex-staging-changes-a" label="ex-staging-changes-a">
      <statement>
        <p>
          Provide the command you entered.
        </p>
      </statement>
      <response />
    </task>
    --> <!-- QUESTIONS C & D BELOW NEED TO BE UPDATED BASED UP COMPARING THE TWO OUTPUTS -->
    <task xml:id="ex-staging-changes-c" label="ex-staging-changes-c">
      <statement>
        <p>
          Now run the <c>git status</c> command again.
          Compare your output in <xref ref="ex-staging-changes-a" /> to the output in <xref ref="ex-verify-changes-new-a" />.
        </p>

        <p>
          How many files are not staged?
        </p>
      </statement>


      <choices>
        <choice correct="yes">
          <statement>
            <p>
              0
            </p>
          </statement>

          <feedback>
            <p>
              Correct! After issuing the <c>git stage</c> (or <c>git add</c>) command the file will be staged.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              1
            </p>
          </statement>

          <feedback>
            <p>
              Once you have issued the <c>git stage</c> command it show that the file is ready to be committed.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              2
            </p>
          </statement>

          <feedback>
            <p>
              Did you change more than 1 file by accident? Verify that you only changed the file specified in your issue.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              Cannot be determined from the output provided by the <c>git status</c> command.
            </p>
          </statement>

          <feedback>
            <p>
              The <c>git status</c> command will show you all unstaged and staged files.
            </p>
          </feedback>
        </choice>
      </choices>

      <hint>
        <p>
          Staged means a file has been modified and added to the commit.
        </p>
      </hint>
    </task>


    <task xml:id="ex-staging-changes-d" label="ex-staging-changes-d">
      <statement>
        <p>
          How many files are listed as ready to be committed?
        </p>
      </statement>


      <choices>
        <choice>
          <statement>
            <p>
              0
            </p>
          </statement>

          <feedback>
            <p>
              If you issued the <c>git stage</c> command properly the file you changed should appear as ready to be committed.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>
              1
            </p>
          </statement>

          <feedback>
            <p>
              Correct! After issuing the <c>git stage</c> (or <c>git add</c>) command the file will be staged.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              2
            </p>
          </statement>

          <feedback>
            <p>
              Did you change more than 1 file by accident? Verify that you only changed the file specified in your issue.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              Cannot be determined from the output provided by the <c>git status</c> command.
            </p>
          </statement>

          <feedback>
            <p>
              The <c>git status</c> command will show you all unstaged and staged files.
            </p>
          </feedback>
        </choice>
      </choices>

      <hint>
        <p>
          Staged means a file has been modified and added to the commit.
        </p>
      </hint>
    </task>
  </exercise>

  <exercise xml:id="ex-staging-changes-diff" label="ex-staging-changes-diff">
    <statement>
      <p>
        Run the <c>git diff</c> command again.
        What output is produced?
      </p>
    </statement>


    <choices>
      <choice correct="yes">
        <statement>
          <p>
            No output is produced.
          </p>
        </statement>

        <feedback>
          <p>
            Correct! There are no differences because your changes were staged.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            It shows the file name that I changed.
          </p>
        </statement>

        <feedback>
          <p>
            If you are seeing the file name you changed it means either you made additional changes after the <c>git stage</c> command was done or your <c>git stage</c> command did not work properly.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            It shows the code I added in green.
          </p>
        </statement>

        <feedback>
          <p>
            If you are seeing code changes it means either you made additional changes after the <c>git stage</c> command was done or your <c>git stage</c> command did not work properly.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            It shows the code I deleted in red.
          </p>
        </statement>

        <feedback>
          <p>
            If you are seeing code changes it means either you made additional changes after the <c>git stage</c> command was done or your <c>git stage</c> command did not work properly.
          </p>
        </feedback>
      </choice>
    </choices>

    <hint>
      <p>
        The <c>git diff</c> command will only show the changes that have yet to be staged.
      </p>
    </hint>
  </exercise>
  </exercises>

  <conclusion>
    <p>
      The <c>git diff --staged</c> command will show you the differences between the staged changes and the most recent commit.
      Try this command now.
    </p>

    <p>
      Note that git also has a <c>git add</c> command that is equivalent to <c>git stage</c>.
      So, you can add files to the stage using either <c>git stage</c> or <c>git add</c>.
      These activities will use <c>git stage</c> because it seems more descriptive of what is happening.
      However, you are likely to see <c>git add</c> used in other resources, so it is worth knowing that they are equivalent.
    </p>
  </conclusion>
</section>
